{"version":3,"sources":["components/colors.ts","components/Home.tsx","components/styles.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["background","accent","HomeHeader","styled","div","StyledNotesContainer","Title","p","NoteTitle","motion","NoteData","StyledHome","StyledNote","StyledOpenedNote","Home","useState","openedNote","setOpenedNote","type","OpenedNotes","Notes","gutter","columnsCountBreakPoints","300","700","1000","Note","note","title","id","data","layoutId","onTap","initial","opacity","y","animate","layout","GlobalStyle","createGlobalStyle","App","className","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4ef396c.chunk.js","sourcesContent":["export const background = '#141721';\nexport const accent = '#83e5c9';\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { accent, background } from \"./colors\";\nimport { AnimatePresence, AnimateSharedLayout, motion } from \"framer-motion\";\n// no type\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport { NoteProps, NotesProps, OpenedNoteProps, TempNote } from \"../types\";\n\nconst HomeHeader = styled.div`\n  display: flex;\n  padding: 16px;\n  padding-bottom: 0px;\n`;\n\nconst StyledNotesContainer = styled.div`\n  padding: 14px;\n`;\n\nconst Title = styled.p`\n  color: ${accent};\n  font-size: 2rem;\n  /* opacity: 0.8; */\n`;\nconst NoteTitle = motion(\n  styled.p`\n    font-size: 2rem;\n    /* opacity: 0.8; */\n  `\n);\nconst NoteData = motion(\n  styled.p`\n    font-size: 1rem;\n    opacity: 0.8;\n  `\n);\nconst StyledHome = motion(\n  styled.div`\n    height: 100vh;\n    background: ${background};\n  `\n);\n\nconst StyledNote = motion(\n  styled.div`\n    padding: 20px;\n    margin: 6px;\n    border: 0.5px solid ${accent};\n    /* box-shadow: 0 0 2px 0.5px black; */\n    background-color: ${background};\n  `\n);\n\nconst StyledOpenedNote = motion(\n  styled.div`\n    height: 100vh;\n    position: absolute;\n    width: 100%;\n    z-index: 10;\n    background-color: ${background};\n  `\n);\n\nexport default function Home() {\n  const [openedNote, setOpenedNote] = useState<TempNote>(null);\n\n  return (\n    <StyledHome>\n      <AnimateSharedLayout type=\"crossfade\">\n        <AnimatePresence>\n          {openedNote && <OpenedNotes {...{ openedNote, setOpenedNote }} />}\n        </AnimatePresence>\n        <HomeHeader>\n          <Title>ethereal</Title>\n        </HomeHeader>\n        <Notes {...{ setOpenedNote, openedNote }} />\n      </AnimateSharedLayout>\n    </StyledHome>\n  );\n}\n\nfunction Notes({ setOpenedNote, openedNote }: NotesProps) {\n  return (\n    <StyledNotesContainer>\n      <ResponsiveMasonry\n        gutter={\"5\"}\n        columnsCountBreakPoints={{ 300: 2, 700: 4, 1000: 5 }}\n      >\n        <Masonry>\n          <Note\n            {...{\n              setOpenedNote,\n              openedNote,\n              note: { title: \"test title1\", id: \"1\" },\n            }}\n          />\n          <Note\n            {...{\n              setOpenedNote,\n              openedNote,\n              note: { title: \"test title 2\", id: \"2\" },\n            }}\n          />\n          <Note\n            {...{\n              setOpenedNote,\n              openedNote,\n              note: {\n                title: \"test title 3\",\n                data: \"this is test data\",\n                id: \"3\",\n              },\n            }}\n          />\n        </Masonry>\n      </ResponsiveMasonry>\n    </StyledNotesContainer>\n  );\n}\n\nfunction Note({ note, setOpenedNote, openedNote }: NoteProps) {\n  return (\n    <StyledNote\n      layoutId={note?.id}\n      onTap={() => {\n        setOpenedNote(note);\n      }}\n      initial={{ opacity: 0, y: -12 }}\n      animate={{ opacity: 1, y: 0 }}\n    >\n      <NoteTitle layoutId={`${note?.id}-note-title`}>{note?.title}</NoteTitle>\n      <NoteData layoutId={`${note?.id}-note-data`}>{note?.data}</NoteData>\n    </StyledNote>\n  );\n}\n\nfunction OpenedNotes({ openedNote, setOpenedNote }: OpenedNoteProps) {\n  return (\n    <StyledOpenedNote\n      layout\n      layoutId={openedNote?.id}\n      onTap={() => setOpenedNote(null)}\n    >\n      <NoteTitle layoutId={`${openedNote?.id}-note-title`}>\n        {openedNote?.title}\n      </NoteTitle>\n      <NoteData layoutId={`${openedNote?.id}-note-data`}>\n        {openedNote?.data}\n      </NoteData>\n    </StyledOpenedNote>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\nimport { background } from \"./colors\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    body {\n        background:${background};\n        color:white;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        \n    }\n\n`;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport { GlobalStyle } from \"./components/styles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}